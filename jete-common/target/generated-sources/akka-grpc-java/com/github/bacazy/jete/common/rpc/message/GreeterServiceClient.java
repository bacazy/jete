
// Generated by Akka gRPC. DO NOT EDIT.
package com.github.bacazy.jete.common.rpc.message;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;

import io.grpc.ManagedChannel;
import io.grpc.MethodDescriptor;

import static com.github.bacazy.jete.common.rpc.message.GreeterService.Serializers.*;

import scala.concurrent.ExecutionContext;


import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;


public abstract class GreeterServiceClient extends GreeterServiceClientPowerApi implements GreeterService, AkkaGrpcClient {
  public static final GreeterServiceClient create(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    return new DefaultGreeterServiceClient(settings, mat, ec);
  }

  protected final static class DefaultGreeterServiceClient extends GreeterServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultGreeterServiceClient(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
        this.settings = settings;
        this.mat = mat;
        this.ec = ec;
        this.clientState = new ClientState(
          settings,
          // TODO #733 remove cast once we update Akka
          akka.event.Logging$.MODULE$.apply(((ActorMaterializer)mat).system(), DefaultGreeterServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultGreeterServiceClient>fromAnyClass()),
          mat,
          ec);
        this.options = NettyClientUtils.callOptions(settings);

        if (mat instanceof ActorMaterializer) {
          ((ActorMaterializer) mat).system().getWhenTerminated().whenComplete((v, e) -> close());
        }
      }

  
    
      private final SingleResponseRequestBuilder<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply> sayHelloRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(sayHelloDescriptor, channel, options, settings, ec);
      }
    
  
    
      
        
          private final SingleResponseRequestBuilder<akka.stream.javadsl.Source<com.github.bacazy.jete.common.rpc.message.HelloRequest, akka.NotUsed>, com.github.bacazy.jete.common.rpc.message.HelloReply> itKeepsTalkingRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
            return new JavaClientStreamingRequestBuilder<>(
                                 itKeepsTalkingDescriptor, "helloworld.GreeterService.ItKeepsTalking", channel, options, settings, mat, ec);
          }
        
      
    
  
    
      
        
          private final StreamResponseRequestBuilder<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply> itKeepsReplyingRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
            return new JavaServerStreamingRequestBuilder<>(
                                 itKeepsReplyingDescriptor, "helloworld.GreeterService.ItKeepsReplying", channel, options, settings, ec);
          }
        
      
    
  
    
      
        
          private final StreamResponseRequestBuilder<akka.stream.javadsl.Source<com.github.bacazy.jete.common.rpc.message.HelloRequest, akka.NotUsed>, com.github.bacazy.jete.common.rpc.message.HelloReply> streamHellosRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
            return new JavaBidirectionalStreamingRequestBuilder<>(
                                 streamHellosDescriptor, "helloworld.GreeterService.StreamHellos", channel, options, settings, ec);
          }
        
      
    
  

      

        /**
         * For access to method metadata use the parameterless version of sayHello
         */
        public java.util.concurrent.CompletionStage<com.github.bacazy.jete.common.rpc.message.HelloReply> sayHello(com.github.bacazy.jete.common.rpc.message.HelloRequest request) {
          return sayHello().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer sayHello(com.github.bacazy.jete.common.rpc.message.HelloRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply> sayHello()
        
        {
          return clientState.withChannel( this::sayHelloRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of itKeepsTalking
         */
        public java.util.concurrent.CompletionStage<com.github.bacazy.jete.common.rpc.message.HelloReply> itKeepsTalking(akka.stream.javadsl.Source<com.github.bacazy.jete.common.rpc.message.HelloRequest, akka.NotUsed> request) {
          return itKeepsTalking().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer itKeepsTalking(com.github.bacazy.jete.common.rpc.message.HelloRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<akka.stream.javadsl.Source<com.github.bacazy.jete.common.rpc.message.HelloRequest, akka.NotUsed>, com.github.bacazy.jete.common.rpc.message.HelloReply> itKeepsTalking()
        
        {
          return clientState.withChannel( this::itKeepsTalkingRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of itKeepsReplying
         */
        public akka.stream.javadsl.Source<com.github.bacazy.jete.common.rpc.message.HelloReply, akka.NotUsed> itKeepsReplying(com.github.bacazy.jete.common.rpc.message.HelloRequest request) {
          return itKeepsReplying().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer itKeepsReplying(com.github.bacazy.jete.common.rpc.message.HelloRequest) if possible.
         */
        
          public StreamResponseRequestBuilder<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply> itKeepsReplying()
        
        {
          return clientState.withChannel( this::itKeepsReplyingRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of streamHellos
         */
        public akka.stream.javadsl.Source<com.github.bacazy.jete.common.rpc.message.HelloReply, akka.NotUsed> streamHellos(akka.stream.javadsl.Source<com.github.bacazy.jete.common.rpc.message.HelloRequest, akka.NotUsed> request) {
          return streamHellos().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer streamHellos(com.github.bacazy.jete.common.rpc.message.HelloRequest) if possible.
         */
        
          public StreamResponseRequestBuilder<akka.stream.javadsl.Source<com.github.bacazy.jete.common.rpc.message.HelloRequest, akka.NotUsed>, com.github.bacazy.jete.common.rpc.message.HelloReply> streamHellos()
        
        {
          return clientState.withChannel( this::streamHellosRequestBuilder);
        }
      

      
        private static MethodDescriptor<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply> sayHelloDescriptor =
          MethodDescriptor.<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("helloworld.GreeterService", "SayHello"))
            .setRequestMarshaller(new ProtoMarshaller<com.github.bacazy.jete.common.rpc.message.HelloRequest>(HelloRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.github.bacazy.jete.common.rpc.message.HelloReply>(HelloReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply> itKeepsTalkingDescriptor =
          MethodDescriptor.<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply>newBuilder()
            .setType(
  
  MethodDescriptor.MethodType.CLIENT_STREAMING 
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("helloworld.GreeterService", "ItKeepsTalking"))
            .setRequestMarshaller(new ProtoMarshaller<com.github.bacazy.jete.common.rpc.message.HelloRequest>(HelloRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.github.bacazy.jete.common.rpc.message.HelloReply>(HelloReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply> itKeepsReplyingDescriptor =
          MethodDescriptor.<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply>newBuilder()
            .setType(
  
  
   MethodDescriptor.MethodType.SERVER_STREAMING 
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("helloworld.GreeterService", "ItKeepsReplying"))
            .setRequestMarshaller(new ProtoMarshaller<com.github.bacazy.jete.common.rpc.message.HelloRequest>(HelloRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.github.bacazy.jete.common.rpc.message.HelloReply>(HelloReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply> streamHellosDescriptor =
          MethodDescriptor.<com.github.bacazy.jete.common.rpc.message.HelloRequest, com.github.bacazy.jete.common.rpc.message.HelloReply>newBuilder()
            .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("helloworld.GreeterService", "StreamHellos"))
            .setRequestMarshaller(new ProtoMarshaller<com.github.bacazy.jete.common.rpc.message.HelloRequest>(HelloRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.github.bacazy.jete.common.rpc.message.HelloReply>(HelloReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



